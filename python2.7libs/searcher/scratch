# C:\Users\mosthated\AppData\Roaming\Python\Python37\Scripts\pyuic5.exe .\SearcherSettings.ui -o .\SearcherSettings.py

        # panetab = None
        # for pane in hou.ui.floatingPaneTabs():
        #     if pane.type() == hou.paneTabType.PythonPanel:
        #         print(pane.activeInterface().name())
        #         if pane.activeInterface().name() == 'SceneGraphDetailsPanel':
        #             panetab = pane
        #             break

        # ret = []
        # for t in tabs:
        #     if t.type() == hou.paneTabType.PythonPanel:
        #         if t.activeInterface() == pytype:
        #             t.pane().setIsSplitMaximized(False)
        #             ret.append(t)


# else:
#     os.environ['QT_API'] = 'pyside2'
#     from PySide import QtUiTools
#     from qtpy import QtGui
#     from qtpy import QtCore
#     from qtpy import QtWidgets
# endregion



    # ------------------------------------- checkforchanges
    def checkforchanges(self):
        for i in range(len(util.SETTINGS_KEYS)):
            if util.SETTINGS_TYPES[util.SETTINGS_KEYS[i]] == "bool":
                if self.isdebug and self.isdebug.level in {"ALL"}:
                    print("Get attribute: ", getattr(self, util.SETTINGS_KEYS[i]))
                    print("Get settings: ", bc(self.currentsettings[util.SETTINGS_KEYS[i]]))
                if getattr(self, util.SETTINGS_KEYS[i]).isChecked() != bc(self.currentsettings[util.SETTINGS_KEYS[i]]):
                    if self.isdebug and self.isdebug.level in {"ALL"}:
                        print("{} value {}".format(util.SETTINGS_KEYS[i], getattr(self, util.SETTINGS_KEYS[i]).isChecked()))
                        print("{} value {}".format(util.SETTINGS_KEYS[i], bc(self.currentsettings[util.SETTINGS_KEYS[i]])))
                    return True
            elif util.SETTINGS_TYPES[util.SETTINGS_KEYS[i]] == "text":
                if self.isdebug and self.isdebug.level in {"ALL"}:
                    print("Get attribute: ", getattr(self, util.SETTINGS_KEYS[i]))
                    print("Get settings: ", self.currentsettings[util.SETTINGS_KEYS[i]])
                if getattr(self, util.SETTINGS_KEYS[i]).text() != self.currentsettings[util.SETTINGS_KEYS[i]]:
                    if self.isdebug and self.isdebug.level in {"ALL"}:
                        print("{} value {}".format(util.SETTINGS_KEYS[i], getattr(self, util.SETTINGS_KEYS[i]).text()))
                        print("{} value {}".format(util.SETTINGS_KEYS[i], self.currentsettings[util.SETTINGS_KEYS[i]]))
                    return True
            elif util.SETTINGS_TYPES[util.SETTINGS_KEYS[i]] == "intval":
                if self.isdebug and self.isdebug.level in {"ALL"}:
                    print("Get attribute: ", getattr(self, util.SETTINGS_KEYS[i]))
                    print("Get settings: ", self.currentsettings[util.SETTINGS_KEYS[i]])
                if getattr(self, util.SETTINGS_KEYS[i]).value() != self.currentsettings[util.SETTINGS_KEYS[i]]:
                    if self.isdebug and self.isdebug.level in {"ALL"}:
                        print("{} value {}".format(util.SETTINGS_KEYS[i], getattr(self, util.SETTINGS_KEYS[i]).value()))
                        print("{} value {}".format(util.SETTINGS_KEYS[i], int(self.currentsettings[util.SETTINGS_KEYS[i]])))
                    return True
            elif util.SETTINGS_TYPES[util.SETTINGS_KEYS[i]] == "cbx":
                if self.isdebug and self.isdebug.level in {"ALL"}:
                    print("Get attribute: ", getattr(self, util.SETTINGS_KEYS[i]))
                    print("Get settings: ", self.currentsettings[util.SETTINGS_KEYS[i]])
                if getattr(self, util.SETTINGS_KEYS[i]).currentText() != self.currentsettings[util.SETTINGS_KEYS[i]]:
                    if self.isdebug and self.isdebug.level in {"ALL"}:
                        print("{} value {}".format(util.SETTINGS_KEYS[i], getattr(self, util.SETTINGS_KEYS[i]).currentText()))
                        print("{} value {}".format(util.SETTINGS_KEYS[i], str(self.currentsettings[util.SETTINGS_KEYS[i]])))
                    return True
        return False


    def bug_cb(self, toggled):
        if toggled == True and not self.bugreport.isVisible():
            if self.animatedsettings.isChecked():
                pos = self.bugreportbtn.mapToGlobal(
                    QtCore.QPoint( -43, 34))
            else:
                pos = self.bugreportbtn.mapToGlobal(
                    QtCore.QPoint( -45, 35))
            self.bugreport.setGeometry(
                    pos.x(),
                    pos.y(),
                    self.bugreport.width(),
                    self.bugreport.height()
                )
            self.bugreport.show()
        else:
            self.bugreport.close()

    def theme_cb(self, toggled):
        if toggled == True and not self.theme.isVisible():
            if self.animatedsettings.isChecked():
                pos = self.themebtn.mapToGlobal(
                    QtCore.QPoint( -77, 34))
            else:
                pos = self.themebtn.mapToGlobal(
                    QtCore.QPoint( -79, 35))
            self.theme.setGeometry(
                    pos.x(),
                    pos.y(),
                    self.theme.width(),
                    self.theme.height()
                )
            self.theme.show()
        else:
            self.theme.close()

    def about_cb(self):
        self.aboutui = about.About(self.parentwindow)
        self.aboutui.setAttribute(QtCore.Qt.WA_StyledBackground, True)
        self.aboutui.setWindowFlags(
            QtCore.Qt.Popup |
            QtCore.Qt.WindowStaysOnTopHint |
            QtCore.Qt.NoDropShadowWindowHint |
            QtCore.Qt.WindowStaysOnTopHint
        )
        self.aboutui.setParent(self.parentwindow)
        self.aboutui.move(self.pos().x() - 175, self.pos().y())
        self.aboutui.show()


# ------------------------------------------------------- CUSTOM FONT LOADER
style script ----------
def getfontdb():
    return getattr(hou.session, "FONTDB", None)

def getfont(font, size = -1, weight = -1):
    if font in getfontdb().families():
        fontstr = ""
        fontstr += ("Using %s" % font)
        if size >= 0:
            fontstr += (" : Size %s" % size)
        if weight >= 0:
            fontstr += (" : Weight %s" % weight)
    else:
        if hou.isUIAvailable():
                hou.ui.setStatusMessage(("%s not available" % font), severity=hou.severityType.Message)
                return QtGui.QFont()
        else:
            print(("%s not available" % font))
            return QtGui.QFont()

    return QtGui.QFont(font, size, weight)
-------

    # CUSTOM FONT LOADER
    self.infolbl = self.sui.info_lbl
    self.infolbl_font = style.getfont("JetBrains Mono", 8)
    self.infolbl_font.setWeight(40)
    self.infolbl_font.setLetterSpacing(QtGui.QFont.AbsoluteSpacing, -1)
    self.infolbl_font.setWordSpacing(-2)
    # self.infolbl.setFont(self.infolbl_font)

    self.treetotal_lbl = self.sui.treetotal_lbl
    self.treetotal_lbl_font = style.getfont("JetBrains Mono", 8)
    self.treetotal_lbl_font.setWeight(40)
    self.treetotal_lbl_font.setLetterSpacing(QtGui.QFont.AbsoluteSpacing, -1)
    self.treetotal_lbl_font.setWordSpacing(0)
    # self.treetotal_lbl.setFont(self.treetotal_lbl_font)
    # self.treetotal_lbl.setMinimumSize(QtCore.QSize(50, 0))

    # ------------------------------------------------------- Spacing
    # tnum = str(treeitemsnum)
    # goalnum = 5
    # if len(tnum) == 3:
    #     itmvald = tnum.rjust((goalnum + 2) - count_chars(str(treeitemsnum)), " ")
    # else: 
    #     itmvald = tnum.rjust((goalnum) - count_chars(str(treeitemsnum)), " ")
    # itm = itmvald.replace(" ", "&nbsp;")

    # ------------------------------------------------------- Auto - Add font
    jbfont = getattr(hou.session, "FONTDB", None)
    if not getattr(hou.session, "FONTDB", None):
        fontlocation = os.path.join(script_path, "fonts")
        jbfontfolder = "JetBrainsMono-1.0.0"
        f = []
        for (dirpath, dirnames, filenames) in os.walk(os.path.join(fontlocation, jbfontfolder)):
            f.extend(filenames)
            break
        if f:
            for font in f:
                fontdb = QtGui.QFontDatabase()
                fontdb.addApplicationFont(os.path.join(fontlocation, jbfontfolder, font))
                print("Added %s" % font)
            hou.session.FONTDB = fontdb



    # # ----------------------------------------- chooseColor
    # # NOTE chooseColor ------------------------------------
    # def chooseColor(self):
    #     sender = self.sender()
    #     name = sender.objectName()
    #     colorfield = getattr(self.ui, name)
        
    #     qcolor = QtGui.QColor()
    #     qcolor.setNamedColor(colorfield.text())

    #     color = hou.Color()
    #     color.setRGB((
    #         qcolor.redF(), 
    #         qcolor.greenF(), 
    #         qcolor.blueF())
    #     )

    #     result = hou.ui.selectColor(initial_color = color)
    #     allWidgets = QtWidgets.QApplication.allWidgets()
    #     for w in allWidgets:
    #         if "Select Color" in w.windowTitle():
    #             pos = self.parent.mapToGlobal(
    #                 QtCore.QPoint(-self.parent.width(), -self.parent.height()))
    #             w.setGeometry(
    #                 pos.x(),
    #                 pos.y(),
    #                 w.width(),
    #                 w.height()
    #             )
    #             # w.move(self.parent.width()200, 100)

    #     if result:
    #         rgb = result.rgb()
    #         newcolor = QtGui.QColor(
    #             rgb[0]*255, 
    #             rgb[1]*255, 
    #             rgb[2]*255
    #         )
            
    #         if newcolor.isValid():
    #             colorfield.setText(newcolor.name())
    #             sender.setStyleSheet("background-color:" + colorfield.text())





    # ----------------------------------------- chooseColor
    # NOTE chooseColor ------------------------------------
    def chooseColor(self):
        sender = self.sender()
        
        self.name = sender.objectName()
        self.colorfield[self.name] = (getattr(self.ui, self.name), sender)
        
        qcolor = QtGui.QColor()
        qcolor.setNamedColor(self.colorfield[self.name][0].text())

        # color = hou.Color()
        # color = QtGui.QColor()
        # color.setRGB((
        #     qcolor.redF(), 
        #     qcolor.greenF(), 
        #     qcolor.blueF())
        # )

        # hou.ui.openColorEditor(self.colorchange_cb, include_alpha=False, initial_color = color)
        # hd.executeDeferred(self._opencoloreditor, color)
        colord = QtWidgets.QColorDialog(self)
        colord.setModal(False)
        pos = self.parentwindow.mapToGlobal(
            QtCore.QPoint(self.parentwindow.width(), self.parentwindow.height()))
        colord.move(
            pos.x() + 300,
            pos.y(),
        )
        colord.getColor(
            initial=qcolor, 
            parent=self,
            options=QtWidgets.QColorDialog.DontUseNativeDialog
        )
        # colord.setWindowFlags(
        #     QtCore.Qt.CustomizeWindowHint
        #     # | QtCore.Qt.WindowStaysOnTopHint 
        #     # | QtCore.Qt.X11BypassWindowManagerHint
        # )
        # self.activateWindow()  
        # self._opencoloreditor(color)



        # NOTE PANES ---------------------------
                        # hou.playbar.moveToBottom()

                    # for ii in i:
                    #     print(ii)
                    # print("Under mouse: ", i.windowTitle())
                print("--------------------------------------")
                current_desktop = hou.ui.curDesktop()
                # allpanes = current_desktop.panes()
                # if allpanes:
                #     try:
                #         self.processdesktop("current_desktop.panes()", allpanes)
                #     except:
                #         pass
                # panetabsd = current_desktop.paneTabs()
                # panetabs = hou.ui.paneTabs()
                # if panetabs:
                #     try:
                #         self.processdesktop("current_desktop.paneTabs()", panetabsd)
                #         self.processdesktop("hou.ui.paneTabs()", panetabs) #  ------ Good one
                #     except:
                #         pass
                # floating = hou.ui.floatingPanels()
                # if floating:
                #     try:
                #         self.processdesktop("current_desktop.floatingPanels()", floating)
                #         print(floating.name())
                #     except:
                #         pass
                # desktoppane = current_desktop.paneUnderCursor()
                # if desktoppane:
                #     try:
                #         self.processdesktop("current_desktop.paneUnderCursor()", desktoppane)
                #     except:
                #         pass
                # desktoptab = current_desktop.paneTabUnderCursor()
                # if desktoptab:
                #     try:
                #         self.processdesktop("current_desktop.paneTabUnderCursor()", desktoptab)
                #     except:
                #         pass

                allWidgets = QtWidgets.QApplication.allWidgets()
                for w in allWidgets:
                    if "playbar" in w.windowTitle():
                        print("Is Playbar? ", w.windowTitle(), w)